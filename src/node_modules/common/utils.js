export function assign() {
  return Object.assign({}, ...arguments);
}

function isPlainObject(obj) {
  return obj && typeof obj === 'object' && obj.constructor === Object.prototype.constructor;
}

function merge2(a, b) {
  for(let key in b) {
    const source = b[key];
    const target = a[key];
    if(isPlainObject(target) && isPlainObject(source)) {
      a[key] = merge2(target, source);
    }
    else if(source === void 0) {
      delete a[key];
    }
    else {
      a[key] = b[key];
    }
  }
  return a;
}

/** Merges the properties of each argument into the one before it. Deep merging
  * is applied only where both the source and target properties are plain
  * JavaScript objects (constructor must be Object). Arrays are not merged.
  */
export function merge() {
  if(arguments.length <= 1) {
    return arguments[0];
  }
  let source = arguments[arguments.length - 1];
  for(let i = arguments.length - 2; i >= 0; i--) {
    let target = arguments[i];
    source = merge2(target, source);
  }
  return source;
}
