import {assert} from 'chai';
import {prune} from '../utils';

describe('utils', () => {
  describe('#prune()', () => {
    const now = new Date();
    function avoid(x, y) {
      this.x = x;
      this.y = y;
      this.obj = {
        foo: 'bar'
      };
    }
    const example = {
      now,
      num: 123,
      x: 3,
      foo: {
        x: 50,
        y: 100
      },
      obj: {
        now,
        foo: {
          bar: 'foobar',
          obj: new avoid(456, 789)
        },
        x: 5,
        y: 8,
        test: {
          abc: 'xyz',
          x: 7,
          now
        },
        obj: {
          bar: 'barfoo'
        }
      }
    };

    it('should return the original value if not a plain object', () => {
      const result1 = prune(['now', 'x'], 5);
      const result2 = prune(['now', 'x'], new avoid(456, 789));
      assert.strictEqual(result1, 5);
      assert.deepEqual(result2, new avoid(456, 789));
    });

    it('should omit the specified properties if an array is supplied for the first argument', () => {
      const result = prune(['now', 'x'], example);
      assert.deepEqual(result, {
        num: 123,
        foo: {
          y: 100
        },
        obj: {
          foo: {
            bar: 'foobar',
            obj: new avoid(456, 789)
          },
          y: 8,
          test: {
            abc: 'xyz'
          },
          obj: {
            bar: 'barfoo'
          }
        }
      });
    });

    it('should whitelist the specified properties if the `invert` option == true', () => {
      const result = prune({
        properties: ['now', 'x', 'obj'],
        invert: true
      }, example);
      assert.deepEqual(result, {
        now,
        x: 3,
        obj: {
          now,
          x: 5,
          obj: {}
        }
      });
    });

    it('should only traverse deep properties contained within plain objects', () => {
      const result = prune({
        properties: ['obj', 'foo'],
        invert: true
      }, example);
      assert.deepEqual(result, {
        foo: {},
        obj: {
          foo: {
            obj: new avoid(456, 789)
          },
          obj: {}
        }
      });
    });

    it('should replace specified properties if a `replaceWith` option is provided', () => {
      const token = '#pruned';
      const result = prune({
        properties: ['x'],
        replaceWith: token
      }, example);
      assert.deepEqual(result, {
        now,
        num: 123,
        x: token,
        foo: {
          x: token,
          y: 100
        },
        obj: {
          now,
          foo: {
            bar: 'foobar',
            obj: new avoid(456, 789)
          },
          x: token,
          y: 8,
          test: {
            abc: 'xyz',
            x: token,
            now
          },
          obj: {
            bar: 'barfoo'
          }
        }
      });
    });

    it('should replace other properties if a `replaceWith` option is provided and `invert` == true', () => {
      const token = '#pruned';
      const result = prune({
        properties: ['x', 'obj'],
        invert: true,
        replaceWith: token
      }, example);
      assert.deepEqual(result, {
        now: token,
        num: token,
        x: 3,
        foo: token,
        obj: {
          now: token,
          foo: token,
          x: 5,
          y: token,
          test: token,
          obj: {
            bar: token
          }
        }
      });
    });
  });
});
