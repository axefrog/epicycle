import {assign, logError} from './utils';
import {collapseStateToModel} from './component-helpers';

function makeStateFactory(makeView, makeModel) {
  return function makeState(state) {
    const components = collapseStateToModel(state);
    const newState = {};
    if(makeModel) {
      const model = makeModel(state);
      if(makeView) {
        newState.vtree = makeView(assign(state, { model }));
      }
      newState.model = assign(model, { components });
    }
    else {
      if(makeView) {
        newState.vtree = makeView(state);
      }
      newState.model = { components };
    }
    return newState;
  };
}

// adapted from https://github.com/motorcyclejs/dom/blob/develop/src/isolate.js
const SCOPE_PREFIX = 'cycle-scope-';
function isolateSink(sink, scope) {
  return sink.map(state => {
    const vtree = state.vtree;
    if(vtree && vtree.sel.indexOf(`${SCOPE_PREFIX}${scope}`) === -1) {
      if (vtree.data.ns) { // svg elements
        const {attrs = {}} = vtree.data;
        attrs.class = `${attrs.class || ''} ${SCOPE_PREFIX}${scope}`;
      }
      else {
        vtree.sel = `${vtree.sel}.${SCOPE_PREFIX}${scope}`;
      }
    }
    return state;
  });
}

export function makeStateDriver(domDriver) {
  return function stateDriver(state$) {
    state$ = state$.multicast();
    const vtree$ = state$
      .filter(p => p.vtree)
      .map(p => p.vtree);

    const DOM = domDriver(vtree$);
    const source = {
      state$,
      DOM,
      applyAPI: sources => assign(sources, {
        DOM,
        isolateSink,
        state: {
          makeFactory: makeStateFactory
        }
      })
    };
    return source;
  };
}

export function makeBrowserStateDriver(domDriver) {
  function setTitle(title) {
    document.title = title;
  }

  return function(state$) {
    state$ = state$.multicast();
    const stateDriver = makeStateDriver(domDriver);
    const source = stateDriver(state$);

    source.state$
      .filter(p => p.model && (p.model.title || p.model.heading))
      .map(p => p.model.title || p.model.heading)
      .observe(setTitle)
      .catch(logError);

    return source;
  };
}
